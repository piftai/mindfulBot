package handlers

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"mindfulBot/database"
	"strings"
)

/*
–ü–∞–∫–µ—Ç handler –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã/–Ω–∞–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤/—Å–ª–æ–≤.
–≠—Ç–æ —É—Å–ª–æ–≤–Ω—ã–π —Ç—Ä–∞–Ω–ø—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π, –∑–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—á–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä, —Ç—É–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
–∏ –≤–Ω—É—Ç—Ä–∏ —Ä–æ—É—Ç–µ—Ä–∞ –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –ë—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ
—Å–æ–æ–±—â–µ–Ω–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –∏ –Ω–∞–∑—ã–≤–∞—Ç—å handle<Something>

–§—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–µ–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –≤–Ω–µ –ø–∞–∫–µ—Ç–∞, –∫—Ä–æ–º–µ Router & HandleCallbackQuery

HandleCallbackQuery –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Inline buttons Telegram.
–≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è Inline data -> –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤–Ω–µ –ø–∞–∫–µ—Ç–∞
*/

func Router(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	database.SaveUser(message.From.ID, message.From.UserName)

	listWords := strings.Fields(message.Text)
	if len(listWords) > 1 {
		switch strings.ToLower(listWords[0]) {
		case "set":
			handleSet(bot, message)
		case "delete":
			handleDelete(bot, message)
		}
	}
	switch message.Text {
	case "/start":
		handleStart(bot, message)
	case "/note":
		handleNote(bot, message)
	case "adminPing":
		handleAdmin(bot, message)
	}
}

type Bot interface {
	Send(c tgbotapi.Chattable) (tgbotapi.Message, error)
}

func handleAdmin(bot Bot, msg *tgbotapi.Message) {
	if database.IsAdmin(msg.From.UserName) {
		if _, err := bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "Admin pong successful")); err != nil {
			log.Printf("handleAdmin error: %v", err)
		}
	} else {
		if _, err := bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "Admin pong unsuccessful. Check your permission to this operation")); err != nil {
			log.Printf("handleAdmin error: %v", err)
		}
	}
}

func handleRandomNote(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {

}

func handleStart(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	message := tgbotapi.NewMessage(msg.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ü™∑\n\n"+
		"–¢—ã –≤ —Å–µ—Ä–≤–∏—Å–µ –∑–∞–ø–∏—Å–∏ –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É –°–æ—Ñ–∏–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.\n\n"+
		"‚Äî –ó–∞–ø–∏—à–∏—Å—å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è\n"+
		"‚Äî –ü–æ–ª—É—á–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ\n"+
		"‚Äî –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∑–∞—Ä–∞–Ω–µ–µ\n\n"+
		"–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–π üëáüèª\n/note")
	if msgClon, err := bot.Send(message); err != nil {
		log.Printf("message: %v. does not send: %v", msgClon, err)
	}
}

func handleNote(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	// creating buttons to pick a day
	days := []string{"–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç"}
	var buttons []tgbotapi.InlineKeyboardButton

	for _, day := range days {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(day, "day_"+day))
	}

	// creating keyboard with buttons. that is inline buttons, so we need to turn on this func in botfather
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons)
	reply := tgbotapi.NewMessage(msg.Chat.ID, "–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –¥–µ–Ω—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
	reply.ReplyMarkup = keyboard

	bot.Send(reply)
}

func HandleCallbackQuery(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	data := update.CallbackQuery.Data

	if strings.HasPrefix(data, "day_") {
		handleDaySelection(bot, update)
	} else if strings.HasPrefix(data, "time_") {
		handleTimeSelection(bot, update)
	}
}

func handleDaySelection(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// to understand how it works check tg documentation
	day := strings.TrimPrefix(update.CallbackQuery.Data, "day_")

	times := getAvailableTimes(day)

	// creating buttons to pick a time
	var buttons []tgbotapi.InlineKeyboardButton
	for _, time := range times {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardButtonData(time, "time_"+day+"_"+time))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons)
	reply := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:")
	reply.ReplyMarkup = keyboard

	bot.Send(reply)
}

func handleTimeSelection(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// extract day and time
	data := strings.TrimPrefix(update.CallbackQuery.Data, "time_")
	parts := strings.Split(data, "_")
	day := parts[0]
	time := parts[1]

	// save reminder into database
	userID := update.CallbackQuery.From.ID
	username := update.CallbackQuery.From.UserName
	err := database.SaveReminder(userID, username, day, time, true) // true - –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞(–∑–∞–ø–∏—Å—å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∞ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞) –∑–∞–ø–∏—Å—å –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞
	if err != nil {
		log.Printf("Error saving notification: %v", err)
		bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."))
		return
	}

	msg := fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ %s %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å "+
		"–µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –≤ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å, —Ç–æ –ø—Ä–æ–ø–∏—à–∏ /note", day, time)

	bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, msg))
}

func getAvailableTimes(day string) []string {
	// slots for each day
	slots := map[string][]string{
		"–ø–Ω": {"10:00", "12:00", "18:00"},
		"–≤—Ç": {"11:00", "14:00", "16:00"},
		"—Å—Ä": {"09:30", "11:30", "18:00"},
		"—á—Ç": {"10:00", "18:00"},
		"–ø—Ç": {"10:00"},
	}

	return slots[day]
}

func handleSet(bot Bot, msg *tgbotapi.Message) { // for admins only
	listWords := strings.Fields(msg.Text)
	var isAlwaysNotification bool
	for i := 0; i < len(listWords); i++ {
		listWords[i] = strings.ToLower(listWords[i])
	}

	if len(listWords) >= 5 { // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä //
		if listWords[4] == "once" {
			isAlwaysNotification = false
		} else {
			isAlwaysNotification = true
		}
	} else {
		isAlwaysNotification = false
	}

	if database.IsAdmin(msg.From.UserName) {
		err := database.SaveReminder(msg.From.ID, listWords[1], listWords[2], listWords[3], isAlwaysNotification) // todo user id –Ω–µ –∫–ª–∏–µ–Ω—Ç–∞, –∞ –∞–¥–º–∏–Ω–∞. –Ω–∞–¥–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å
		// –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –º–∞–≥–∏—á–µ—Å–∫–∏–º —Ü–∏—Ñ—Ä–∞–º –≤—ã—à–µ:
		// 1 - –Ω–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
		// 2 - –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
		// 3 - –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
		if err != nil {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"))
			return
		}
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è %v —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ %v %v", listWords[1], listWords[2], listWords[3])))
	} else {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."))
	}
}

func handleDelete(bot Bot, msg *tgbotapi.Message) {
	listWords := strings.Fields(msg.Text)
	for i := 0; i < len(listWords); i++ {
		listWords[i] = strings.ToLower(listWords[i])
	}

	var username, id string

	if len(listWords) <= 1 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ delete @username id_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/all"))
		return
	} else if len(listWords) == 2 {
		username = listWords[1]
		id = "all"
	} else if len(listWords) == 3 {
		username = listWords[1]
		id = listWords[2]
	} else {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ ``` delete @username id_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è/all ```"))
		return
	}

	result, err := database.DeleteReminder(username, id)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"))
		return
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ, —É –∫–ª–∏–µ–Ω—Ç–∞ %v —É–¥–∞–ª–∏–ª–æ—Å—å %v –∑–∞–ø–∏—Å–µ–π.", username, result)))
}
